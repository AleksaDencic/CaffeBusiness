/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import domen.Konobar;
import forme.modeli.ModelTblKonobar;
import java.awt.Frame;
import java.net.SocketException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import logic.Kontroler;

/**
 *
 * @author alekd_000
 */
public class FrmKonobari extends javax.swing.JFrame {

    List<Konobar> konobari;
    Konobar konobar;
    
    ModelTblKonobar mtk;
    
    /**
     * Creates new form FrmKonobari
     */
    public FrmKonobari() {
        initComponents();
        konobari = null;
        btnDetaljnije.setVisible(false);
        btnIzmeni.setVisible(false);
        btnObrisi.setVisible(false);
        srediFormu();
        tblKonobariSort();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        txtKonobar = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKonobari = new javax.swing.JTable();
        btnDetaljnije = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        btnDodaj = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Konobari");

        jLabel1.setText("Konobar [username]");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Konobari");

        tblKonobari.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblKonobari.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblKonobariMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblKonobari);

        btnDetaljnije.setText("Detaljnije");
        btnDetaljnije.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetaljnijeActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnDodaj.setText("Dodaj");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnIzmeni, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDetaljnije, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtKonobar, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKonobar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDetaljnije, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIzmeni, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblKonobariMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblKonobariMouseClicked
        
        btnDetaljnije.setVisible(true);
        btnIzmeni.setVisible(true);
        btnObrisi.setVisible(true);
    }//GEN-LAST:event_tblKonobariMouseClicked

    private void btnDetaljnijeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetaljnijeActionPerformed
        
        int izabraniRed = tblKonobari.getSelectedRow();
        if (izabraniRed < 0 || izabraniRed >= konobari.size()) {
            JOptionPane.showMessageDialog(rootPane, "Morate izabrati konobara.");
            return;
        }
        konobar = konobari.get(izabraniRed);
        new FrmKonobariPojedinacno((Frame) this.getParent(), rootPaneCheckingEnabled, Mod.VIEW, konobar, mtk).setVisible(true);
    }//GEN-LAST:event_btnDetaljnijeActionPerformed

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        
        konobar = new Konobar();
        konobar.setKonobarID(0);
        new FrmKonobariPojedinacno((Frame) this.getParent(), true, Mod.NEW, konobar, mtk).setVisible(true);
        if (konobar.getKonobarID() != 0) {
            ModelTblKonobar mtk = (ModelTblKonobar) tblKonobari.getModel();
            mtk.dodajKonobara(konobar);
            mtk.fireTableDataChanged();
        }
    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        
        int izabraniRed = tblKonobari.getSelectedRow();
        if (izabraniRed < 0 || izabraniRed >= konobari.size()) {
            JOptionPane.showMessageDialog(rootPane, "Morate izabrati konobara.");
            return;
        }
        konobar = konobari.get(izabraniRed);
        new FrmKonobariPojedinacno((Frame) this.getParent(), rootPaneCheckingEnabled, Mod.EDIT, konobar, mtk).setVisible(true);
        ModelTblKonobar mtk = (ModelTblKonobar) tblKonobari.getModel();
        mtk.fireTableDataChanged();
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        
        int izabraniRed = tblKonobari.getSelectedRow();
        if (izabraniRed < 0 || izabraniRed >= konobari.size()) {
            JOptionPane.showMessageDialog(rootPane, "Morate izabrati artikal.");
            return;
        }
        konobar = konobari.get(izabraniRed);
        int brisanje = JOptionPane.showConfirmDialog (null, "Da li ste sigurni da zelite da obrisete ovog konobara?");
        if(brisanje == JOptionPane.YES_OPTION){
            try {
                Kontroler.getInstance().obrisiKonobara(konobar);
                ModelTblKonobar mtk = (ModelTblKonobar) tblKonobari.getModel();
                mtk.obrisiKonobara(izabraniRed);
            } catch (Exception ex) {
                Logger.getLogger(FrmArtikli.class.getName()).log(Level.SEVERE, null, ex);
            }
        }       
    }//GEN-LAST:event_btnObrisiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetaljnije;
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblKonobari;
    private javax.swing.JTextField txtKonobar;
    // End of variables declaration//GEN-END:variables

    private void srediFormu() {
        
        try {
            konobari = Kontroler.getInstance().vratiKonobare();
            ModelTblKonobar mtk = new ModelTblKonobar(konobari);
            tblKonobari.setModel(mtk);
            this.mtk = mtk;
        } catch (SocketException ex) {
            JOptionPane.showMessageDialog(rootPane, "Konekcija je izgubljena. Ulogujte se ponovo.");
            new FrmKonektovanje().setVisible(true);
            dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }
    
    
    private void tblKonobariSort() {
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(tblKonobari.getModel());
        tblKonobari.setRowSorter(rowSorter);
        txtKonobar.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                String filtrirajKonobare = txtKonobar.getText();

                if (filtrirajKonobare.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + filtrirajKonobare, 4));
                }
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                String text = txtKonobar.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet.");
            }
        });
    }

}
